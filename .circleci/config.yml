version: 2.1

tag_only: &tag_only
  filters:
    tags:
      only: /.*/
    branches:
      ignore: /.*/

workflows:
  build-test:
    jobs:
      - build
      - tests:
          requires:
            - build
      - integration-tests:
          requires:
            - tests
  tagged:
    jobs:
      - packaging:
          <<: *tag_only
          context: github-packages-docker-credentials
      - hold:
          <<: *tag_only
          type: approval
          requires:
            - packaging
      - deploy:
          <<: *tag_only
          context: github-packages-docker-credentials
          requires:
            - hold

orbs:
  go: circleci/go@1.1.1
jobs:
  build:
    docker:
      - image: cimg/go:1.14
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup generated files
          command: |
            make gen-ssl-certs
            make gen-oracle-key
      - run:
          name: Build Oracle
          command: |
            docker build --target build -t oracle-build:${CIRCLE_SHA1} .
      - persist_to_workspace:
          root: .
          paths:
            - .

  tests:
    docker:
      - image: cimg/go:1.14
        environment:
          ARTIFACTS: /tmp/artifacts
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run unit-tests
          command: |
            mkdir -p ../reports && mkdir -p ../coverage
            docker volume create reports
            docker volume create coverage
            docker create \
              -v reports:/reports \
              -v coverage:/coverage \
              --name helper alpine:3.4 /bin/true
            docker build --target dev -t dev .
            docker run -v reports:/reports -v coverage:/coverage dev sh -c \
              'gotestsum --junitfile /reports/unit_test_report.xml \
              -- -coverprofile=/coverage/coverage.out ./...'
      - run:
          name: Recover tests results
          command: |
            docker cp  helper:/reports/. ../reports
            docker cp  helper:/coverage/. ../coverage
            docker rm helper --force --volumes
          when: always
      - store_artifacts:
         path: ../coverage
         destination: raw-test-output
      - store_test_results:
         path: ../reports/

  integration-tests:
    docker:
      - image: cimg/go:1.14
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup configuration and volumes
          command: |
            docker volume create oracle-config #ensure same name in docker-compose.ci
            docker volume create oracle-secrets
            docker volume create db-certs
            docker volume create reports
            docker create \
              -v oracle-config:/config \
              -v oracle-secrets:/keys \
              -v db-certs:/certs \
              -v reports:/reports \
              --name helper alpine:3.4 /bin/true
            docker cp ./test/config/. helper:/config
            docker cp ./certs/oracle/. helper:/keys
            docker cp ./certs/db/. helper:/certs
            # adding permissions 
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml run oracle-db bash -c \
              "chown postgres:postgres /certs/db.key && chgrp postgres /certs/db.key && chmod 600 /certs/db.key"
      - run:
          name: Start docker-compose service
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d \
              oracle-server \
              oracle-db
      - run:
          name: Wait for oracle services
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml run dockerize \
             -wait tcp://oracle-server:8080
      - run:
          name: Run integration tests
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml run dev sh -c \
            'gotestsum --junitfile /reports/integration_report.xml \
            -- -tags=integration \
            -parallel=4 \
            ./test/integration/... \
            -config-file-name integration \
            -oracle-base-url oracle-server:8080'
      - run:
          name: Recover tests results
          command: |
            docker cp  helper:/reports/. ./reports
            docker rm helper --force --volumes
          when: always
      - store_test_results:
          path: reports/

  packaging:
    environment:
      DOCKER_HUB_URL: docker.pkg.github.com
      IMAGE_REPOSITORY: cryptogarageinc/p2pderivatives-oracle
      IMAGE_NAME: oracle
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Login to docker repository
          command: |
            echo "$DOCKER_HUB_PASS" | docker login ${DOCKER_HUB_URL} -u "$DOCKER_HUB_USER" --password-stdin
      - run:
          name: Build docker image
          command: |
            docker build -t ${DOCKER_HUB_URL}/${IMAGE_REPOSITORY}/${IMAGE_NAME}:${CIRCLE_TAG} .
      - run:
          name: Push image to repository
          command: |
            docker push ${DOCKER_HUB_URL}/${IMAGE_REPOSITORY}/${IMAGE_NAME}:${CIRCLE_TAG}

  deploy:
    docker:
      - image: cimg/base:stable
    environment:
      DOCKER_HUB_URL: docker.pkg.github.com
      CD_MACHINE_SSH: circleci@3.115.1.105
      CD_STACK_NAME: oracle-staging
      CD_SERVICE_ADDRESS: https://oracle.p2pderivatives.io/asset
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "28:6e:e8:c6:7f:02:01:12:7c:3f:f4:6e:a7:42:3f:77"
      - run:
          name: Login to docker repository
          command: |
            echo "$DOCKER_HUB_PASS" | docker login ${DOCKER_HUB_URL} -u "$DOCKER_HUB_USER" --password-stdin
      - run:
          name: Setup remote docker context
          command: |
            ssh -o StrictHostKeyChecking=no $CD_MACHINE_SSH '/bin/true' # (docker fails without a known host)
            docker context create deploy --docker host=ssh://$CD_MACHINE_SSH
            docker context use deploy
            docker info
      - run:
          name: Update Deployment
          command: |
            IMAGE_TAG=${CIRCLE_TAG} \
            DB_PASSWORD=${CD_DB_PASSWORD} \
            CRYPTOCOMPARE_APIKEY=${CD_CRYPTOCOMPARE_APIKEY} \
            docker stack deploy \
            --compose-file ./deploy/docker-compose.yml \
            ${CD_STACK_NAME} \
            --with-registry-auth
      - run:
          name: Wait and check service availability
          command: |
            sleep 20
            dockerize -wait ${CD_SERVICE_ADDRESS} -timeout 30s
